
import numpy as np

import tools


class DiffGaussianPlaneWave:
        """Класс для дифференцированного гауссова импульса"""

        def __init__(self, d, w, Nl, Sc=1.0, eps=1.0, mu=1.0):
            self.d = d  # Задержка импульса
            self.w = w  # Ширина импульса
            self.Nl = Nl
            self.Sc = Sc
            self.eps = eps
            self.mu = mu

        def getE(self, m, q):
            '''
            Расчет поля E в дискретной точке пространства m
            в дискретный момент времени q
            '''
            return -((((q - m * np.sqrt(self.eps * self.mu) / self.Sc) - self.d) / self.w)
                    * np.exp(-(((q - m * np.sqrt(self.eps * self.mu) / self.Sc) - self.d) / self.w) ** 2))

if __name__ == '__main__':
    if __name__ == '__main__':
        # Волновое сопротивление свободного пространства
        W0 = 120.0 * np.pi

        # Число Куранта
        Sc = 1.0
        # Скорость света
        c = 3e8
        # Параметры сигнала
        eps_1 = 8
        fmin = 0.1e9
        fmax = 2.2e9
        f0 = (fmax + fmin) / 2
        DeltaF = fmax - fmin
        A_0 = 200
        A_max = 200
        wg = 2 * np.sqrt(np.log(A_max)) / (np.pi * DeltaF)
        dg = wg * np.sqrt(np.log(A_0))
        # Шаг по пространству в метрах
        dx = c / (fmax * 20) / np.sqrt(eps_1)
        Nl = c / (f0 * dx)
        # шаг во времени в секундах
        dt = (Sc * dx) / c
        # Дискретизация параметров сигнала
        wg = wg / dt
        dg = dg / dt
        # Время расчета в секундах
        maxTime_sec = 3.3e-8
        maxTime = int(np.ceil(maxTime_sec / dt))
        # Размер области моделирования в метрах
        maxSize_m = 3.5
        maxSize = int(np.ceil(maxSize_m / dx))
        # Положение источника в метрах
        sourcePos_m =  maxSize_m / 3
        sourcePos = int(np.ceil(sourcePos_m / dx))
        # Датчики для регистрации поля в метрах
        probesPos = [2 * maxSize_m / 3]
        probes = [tools.Probe(int(np.ceil(pos / dx)), maxTime) for pos in probesPos]

        # Параметры среды
        # Диэлектрическая проницаемость
        eps = np.ones(maxSize)
        eps[:] = eps_1

        # Магнитная проницаемость
        mu = np.ones(maxSize - 1)

        Ez = np.zeros(maxSize)
        Hy = np.zeros(maxSize - 1)

        source =DiffGaussianPlaneWave(
            dg, wg, Nl, Sc, eps[sourcePos], mu[sourcePos])

        # Sc' для правой границы
        Sc1Right = Sc / np.sqrt(mu[-1] * eps[-1])
        koeffABCRight = (Sc1Right - 1) / (Sc1Right + 1)
        # Ez[-2] в предыдущий момент времени
        oldEzRight = Ez[-2]
        # Параметры отображения поля E
        display_field = Ez
        display_ylabel = 'Ez, В/м'
        display_ymin = -1.1
        display_ymax = 1.1
        # Создание экземпляра класса для отображения
        # распределения поля в пространстве
        display = tools.AnimateFieldDisplay(maxSize,
                                            display_ymin, display_ymax,
                                            display_ylabel, dx, dt)

        display.activate()
        display.drawProbes(probesPos)
        display.drawSources([sourcePos])

        for q in range(maxTime):
            # Расчет компоненты поля H
            Hy[:] = Hy + (Ez[1:] - Ez[:-1]) * Sc / (W0 * mu)
            # Источник возбуждения с использованием метода
            # Total Field / Scattered Field
            Hy[sourcePos - 1] -= Sc / (W0 * mu[sourcePos - 1]) * source.getE(0, q)
            ##PMC LEFT
            Hy[0] = 0
            # Расчет компоненты поля E
            Ez[1:-1] = Ez[1:-1] + (Hy[1:] - Hy[:-1]) * Sc * W0 / eps[1:-1]
            # Источник возбуждения с использованием метода
            # Total Field / Scattered Field
            Ez[sourcePos] += (Sc / (np.sqrt(eps[sourcePos] * mu[sourcePos])) *
                              source.getE(-0.5, q + 0.5))
            # Граничные условия ABC второй степени (справа)
            Ez[-1] = oldEzRight + koeffABCRight * (Ez[-2] - Ez[-1])
            oldEzRight = Ez[-2]
            # Регистрация поля в датчиках
            for probe in probes:
                probe.addData(Ez, Hy)
            if q % 10 == 0:
                display.updateData(display_field, q)

        display.stop()
        # Отображение сигнала, сохраненного в датчиках
        tools.showProbeSignals(probes, -1.1, 1.1, dx, dt, maxTime)
        # отображение спектра
        tools.Spectrum(f0, DeltaF, wg, dg)

Геометрия задачи. Сигал на Датчике Спектр сигнала.. 
